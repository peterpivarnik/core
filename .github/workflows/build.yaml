name: Java CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout source
      - uses: actions/checkout@v3

      # 2. Set up Java 21
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Import GPG key
      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Ensure correct GPG directory permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Configure GPG for batch mode and loopback pinentry
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          
          # Decode and import the key
          echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import
          
          # List imported keys
          gpg --list-secret-keys

          # Find the key ID
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep pub | awk '{print $2}' | cut -d/ -f2)

      # 4. Build and run tests
      - name: Build with tests
        env:
          GPG_TTY: $(tty)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>gpg.passphrase</id>
                <passphrase>${{ secrets.GPG_PASSPHRASE }}</passphrase>
              </server>
            </servers>
          </settings>
          EOF
          
          mvn --batch-mode --update-snapshots verify \
            -Dgpg.executable=gpg \
            -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
            -Dgpg.pinentry-mode=loopback

      # 5. Configure Git for release
      - name: Configure Git user
        run: |
          git config --global user.email "${{ secrets.USER_EMAIL }}"
          git config --global user.name "${{ secrets.USER_NAME }}"

      # 6. Prepare Maven release
      - name: Release prepare
        env:
          GPG_TTY: $(tty)
        run: |
          mvn -B release:prepare \
            -Dgpg.executable=gpg \
            -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
            -Dgpg.pinentry-mode=loopback

      # 7. Deploy to Sonatype
      - name: Deploy to Sonatype
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_TTY: $(tty)
        run: |
          # Create Maven settings.xml with Sonatype credentials
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
             <username>${SONATYPE_USERNAME}</username>
             <password>${SONATYPE_PASSWORD}</password>
           </server>
           <server>
             <id>central-s01</id>
                <username>${SONATYPE_USERNAME}</username>
                <password>${SONATYPE_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF

          # Deploy to Sonatype
          mvn deploy -Dmaven.deploy.skip=false \
          -DskipTests \
          -Dsonatype.username=$SONATYPE_USERNAME \
          -Dsonatype.password=$SONATYPE_PASSWORD \
          -Dgpg.passphrase=$GPG_PASSPHRASE \
          -Dgpg.executable=gpg \
          -Dgpg.pinentry-mode=loopback

      # 8. Perform Maven release
      - name: Release perform
        env:
          GPG_TTY: $(tty)
        run: |
          mvn release:perform \
            -Darguments="-Dmaven.deploy.skip=true \
                         -Dgpg.executable=gpg \
                         -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
                         -Dgpg.pinentry-mode=loopback"
