name: Java CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout source
      - uses: actions/checkout@v3

      # 2. Set up Java 21
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Prepare GPG
      - name: Import GPG key and configure
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Ensure correct GPG directory permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Configure GPG
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          
          # Import GPG key with verbose output
          echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import --verbose
          
          # Detailed key listing
          gpg --list-secret-keys --keyid-format=LONG
          
          # Extract full key details
          GPG_KEY_FULL=$(gpg --list-secret-keys --keyid-format=LONG | grep pub | tr -s ' ')
          echo "Full key details: $GPG_KEY_FULL"
          
          # Extract key ID more robustly
          GPG_KEY_ID=$(echo "$GPG_KEY_FULL" | awk '{print $2}' | cut -d/ -f2)
          echo "Extracted Key ID: $GPG_KEY_ID"
          
          # Verify key ID is not empty
          if [ -z "$GPG_KEY_ID" ]; then
            echo "Error: Could not extract GPG key ID"
            exit 1
          fi
          
          # Export the public key
          gpg --armor --export "$GPG_KEY_ID" > public-key.asc
          
          # Ensure correct file permissions
          chmod 600 ~/.gnupg/*

      # 6. Prepare Maven release (removes SNAPSHOT)
      - name: Release prepare
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Robust key ID extraction
          GPG_KEY_FULL=$(gpg --list-secret-keys --keyid-format=LONG | grep pub | tr -s ' ')
          GPG_KEY_ID=$(echo "$GPG_KEY_FULL" | awk '{print $2}' | cut -d/ -f2)
          
          # Verify key ID
          if [ -z "$GPG_KEY_ID" ]; then
            echo "Error: Could not extract GPG key ID"
            exit 1
          fi
          
          # Print key ID for debugging
          echo "Using GPG Key ID: $GPG_KEY_ID"
          
          mvn -B release:prepare \
            -Darguments="-Dgpg.passphrase=$GPG_PASSPHRASE \
                         -Dgpg.keyname=$GPG_KEY_ID \
                         -Dgpg.pinentry-mode=loopback"

      # 7. Deploy release version to Sonatype
      - name: Deploy to Sonatype
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Robust key ID extraction
          GPG_KEY_FULL=$(gpg --list-secret-keys --keyid-format=LONG | grep pub | tr -s ' ')
          GPG_KEY_ID=$(echo "$GPG_KEY_FULL" | awk '{print $2}' | cut -d/ -f2)
          
          # Verify key ID
          if [ -z "$GPG_KEY_ID" ]; then
            echo "Error: Could not extract GPG key ID"
            exit 1
          fi
          
          # Print key ID for debugging
          echo "Using GPG Key ID: $GPG_KEY_ID"
          
          mvn deploy -Dmaven.deploy.skip=false \
            -DskipTests \
            -Possrh \
            -Dsonatype.username=$SONATYPE_USERNAME \
            -Dsonatype.password=$SONATYPE_PASSWORD \
            -Dgpg.passphrase=$GPG_PASSPHRASE \
            -Dgpg.keyname=$GPG_KEY_ID

      # 8. Perform Maven release (increases to next SNAPSHOT)
      - name: Release perform
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Robust key ID extraction
          GPG_KEY_FULL=$(gpg --list-secret-keys --keyid-format=LONG | grep pub | tr -s ' ')
          GPG_KEY_ID=$(echo "$GPG_KEY_FULL" | awk '{print $2}' | cut -d/ -f2)
          
          # Verify key ID
          if [ -z "$GPG_KEY_ID" ]; then
            echo "Error: Could not extract GPG key ID"
            exit 1
          fi
          
          # Print key ID for debugging
          echo "Using GPG Key ID: $GPG_KEY_ID"
          
          mvn release:perform \
            -Darguments="-Dgpg.passphrase=$GPG_PASSPHRASE \
                         -Dgpg.keyname=$GPG_KEY_ID \
                         -Dgpg.pinentry-mode=loopback \
                         -Dmaven.deploy.skip=true"
